from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        for i in range(9):
            col_d, row_d, grid_d = set(), set(), set()
            for j in range(9):
                if board[i][j] != '.' and board[i][j] in row_d: return False
                if board[j][i] != '.' and board[j][i] in col_d: return False
                if board[i // 3 * i % 3][j // 3 * j % 3] != '.' and board[i // 3 * i % 3][j // 3 * j % 3] in grid_d:
                    return False
                row_d.add(board[i][j])
                col_d.add(board[j][i])
                grid_d.add(board[i // 3 * i % 3][j // 3 * j % 3])
        return True


board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."]
    , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
    , [".", "9", "8", ".", ".", ".", ".", "6", "."]
    , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
    , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
    , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
    , [".", "6", ".", ".", ".", ".", "2", "8", "."]
    , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
    , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
# board = [
#     ["8", "3", ".", ".", "7", ".", ".", ".", "."]
#     , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
#     , [".", "9", "8", ".", ".", ".", ".", "6", "."]
#     , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
#     , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
#     , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
#     , [".", "6", ".", ".", ".", ".", "2", "8", "."]
#     , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
#     , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
test = Solution()
print(test.isValidSudoku(board))
