class Solution:
    def exist(self, board, target):
        def inBound(y, x):
            return 0 <= y < n and 0 <= x < m

        def explore(i, j, k):
            if k == o:
                return True
            found = False
            for ii, jj in [(0, -1), (0, 1), (1, 0), (-1, 0)]:
                y, x = i + ii, j + jj
                if not inBound(y, x): continue
                if board[y][x] != target[k]: continue
                if (y, x, k + 1) in seen: continue
                seen.add((y, x, k + 1))
                found |= explore(y, x, k + 1)
            return found

        n, m, o, seen, res = len(board), len(board[0]), len(target), set(), False
        for i, word in enumerate(board):
            for j, c in enumerate(word):
                if board[i][j] != target[0]: continue
                res |= explore(i, j, 1)
        return 1 if res else 0


board = [
    ["ABCE"],
    ["SFCS"],
    ["ADEE"]
]
word = "ABCCED"
A = ["CACCCBAAAACCABBACBAAABBCBBACAAACCAABABABCBBBCCC", "CAABABCCCCBCACAABCBAABCBAAACCACCBCBACABCCAAACCC",
     "BCAABAABCBCAAACBCBAABACCACACBAABBBAAABCBCABABBB", "ACCAAABBBABABAACCCAACACAAACBCAAAACCBBAABAAACBAC",
     "BCBBACBCBBACABBBBBACABCAACCACBBBBBCBCACACCACAAC", "BBBCCBABCCCABCCCACBAABABBACCCCCACCCBBCBCCBACCAC",
     "CBCCCBCAABCCACBACBBAABBBACABABBBCBBBCACCBBBBBBC", "AABBAACBBBBAAACBACBCCCAAAABCCBBCCCBAAACBCBCABAC",
     "BBCBBABBABBBCCCCCCCCCCBBCBBAACABCAAAABCBCCCACAA", "BCBABBCAACBACBBCCBBACBACCAACABABBCACAAAACAACCCC",
     "BCBBACCCBAAAAACAABACBBBAAACACCAABBABCBCABAACCBB", "BBCCBCABCAABABBACBCBACBAAACABACBACBCAAAAAABBACC",
     "BBCBAAAACCBBBAACABBABABAACCCABBABBCBCABABCABBCA", "BBAABCBACACBBABACCCBACAAABBABACCAABACACBBCAABCB",
     "CBABABACAAABBABBACACAAACABBCAABBBACCBABAACCAAAC", "BABCCAACACCBCCCBBBCCBACCACACBCCCBACBBABBCBCCAAC",
     "BCCACBBAAACABABCABBBBBCCCBABBAABCCACCBACBCACBAB", "ACCCCBABCBABCBAABAACBCAABCCCCABABAAAABABBCBBACA",
     "CCABCAABCCCACCABACACCACACCCBCCACCBCBCCBAABBCABA", "ABACCCACBABCCBBCBCCAABCCCBACAAABAAAACCABACCBCCC",
     "CBBCBAAABBBBBAAAAABBBBACACCBACBBCAABCACABCAACCC", "BBACBCACACBBCABBCABABABABACBABBCBCCCBBCCBACAACB",
     "CBAABABAABBCBAACBBBBAACACCCBABBCCAAABCBCCCABABC", "CBABABAAACABCBCCBAACACBCCAABBBCAABAABBBCBAABBCC",
     "CBAAAACAAACBBCCBAAABCCBCBBCCCCBACAACBAABBACBBCA", "CACCBCCAAAACBBCCCCCACAABAAAACCBCACCCABCACCCACBA",
     "ABCBCCCCCBACCCCBCCBCAABABCBBBBCBBBABABCAABCBBBA", "CBACACCCBCABCACBBBBCBCBBCBACAABBCCCBABACABABCCC",
     "CBAAAAABAAABCBBBAABAABCAAABBBAACCCAAABBBCBACBCC", "CBCACBAACCACBCACAABACBAAAAAABBCACAAABBCBBACAACB",
     "CCBBACCBCACCCCCABBBABCBACABABCAABACABBCACBACBBA", "CCCBBACCCABBBBACBABBCBCAABAAAABBBCBBCCBACCAACCA",
     "AABBAACBCCCAACBABACBCCBABCCABBACBACABABACBACCAB", "CCAABCABAACCAACACAACCCACBCCBACBCCACACABCCABCCCB",
     "CCAACCBBBBBACABBABACBCAAAACBBCCBCBACCAACACACCAC", "BACCABCAAAABAACACCAAACBBBBBBCBAABCCAABBBABCABAB",
     "ACAACCBAACABBAAAACCBCBBBAACAACCAABCBAAACCCAABAA", "CACABACCCBAABCAACCABCAACBCCACCABABCABCBCCBCAACC",
     "BCCBCBAABCBBBAABBABABCBCCAACCBACBCCCCBBBACAABCA", "BBCCCCCBBBBABBCCBACACBBAABBAAABBBCCABCCBACABACA",
     "CCACAABCCACCABAACBBACBBCBCCABAACCBABBBBBBBCCACB", "BAABACCCCBBCBACCABBABACACABBBBCBCBCACCBCBBBAACB",
     "CACCAAAAACCBBCBCACBABBABBACCBACBACBCACAACCBCCCC", "CCCCBCBCCABABAACCBBCACBBAABACBBBABCCBBBCACAACAC",
     "ABBABACACAABBACABBCACBCCCBBCABBCCABCACABBCCBCCA", "CBBBACCACABACCCAAACCACCCBBAACCBACBBBCACBABCAABC",
     "ABCBBCCBACCAACCABCBCCBCBAAAABBBBCBAAAAABBCBCCBC", "CBBBBBCCBACABBABACBBACABBBBCABBBCCACCBCACBCBCBB",
     "CBACABBCBAACBBABBACCBBCAAAACACCCBCACCCBABBCACCC", "CAAACCAAAACACCACCBBABACBBBCACCAAABABACBBABBCCCB",
     "AAACCACACCBAAAACCACCBBCCAAAACBCBCBBCCCBCAABABAC", "CABBCCBCCCBAAABCAABBCABCBAAACBCBABACACCAAAAAABB",
     "BCCACACBBBABBBABBBABABBBBABBBBBCACCCCCABCCCCCBA", "CACABCCCCACCBBACACCBBBABACCAACBCCBABABCAABCABCB",
     "BCACABAABCCBBCCCACCBBACCBACABCBAABCBCACBABCACCB", "BCAACCCCAACCAABCBCBCBACABBABCBAABAACBCCABCBCAAB",
     "ACACAACBBAACBACCABABCACACCBAACBABCCCCCCBABABACA", "CABBABCBBCBBACCCCABCCBACBBBABACCBCCABACACABABAC",
     "CCAAAAABAACCCBABCBAABAACCCABCCCBCCCCCCABAACBCAC", "ABCACCACBBCABCBCCAAAAACCBBACBBABAAACAABBBCCBABB",
     "ACCCACBACACBCCBACCBBCBBABBCAABCCBAABACCACCCCABC", "BBABCCCBBCBAACBBBACBABBBCACBABCAAACCBAAABBAABAC",
     "AABCCCBABBBCAAACBACAAABCAACCAABAACCCABACCABBCAB", "ACAAACBABACACCBCBBBCACBABCCCCACBABBBABCAACBCAAA",
     "ACAAAABCACACCBACCACACABABCBABACCBCCAACBCAABABAC", "BACCBCBCBAAAACBCCCBABACBBCBCBBAABCCBCABCBCCCACA"]
B = "CBCBBCBBABABABAACBCAACCABACBABAABABAA"
A = [["A", "B", "C", "E"], ["S", "F", "E", "S"], ["A", "D", "E", "E"]]
B = "ABCESEEEFS"
A = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]]
B = "ABCB"
test = Solution()
print(test.exist(A, B))
