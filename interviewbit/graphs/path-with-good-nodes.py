from collections import defaultdict, deque


class Solution:
    def solve(self, A, B, C):
        res, edge_map, q, visited = 0, defaultdict(list), deque([(1, C - A[0])]), {1}
        for edge in B:
            i, j = edge
            edge_map[i].append(j)
            edge_map[j].append(i)

        while q:
            node, count = q.popleft()
            if count < 0:
                continue
            if not any(True for i in edge_map[node] if i not in visited):
                res += 1
                continue
            for i in edge_map[node]:
                if i in visited: continue
                visited.add(i)
                q.append((i, count - A[i - 1]))

        return res


A = [0, 1, 0, 1, 1, 1]
B = [[1, 2],
     [1, 5],
     [1, 6],
     [2, 3],
     [2, 4],
     ]
C = 1

A = [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
     1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
     0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0,
     0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0,
     0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1,
     0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0]
B = [
    [76, 15],
    [207, 87],
    [204, 143],
    [102, 67],
    [203, 9],
    [77, 65],
    [173, 92],
    [199, 82],
    [95, 50],
    [132, 84],
    [213, 67],
    [65, 55],
    [116, 74],
    [195, 64],
    [52, 3],
    [194, 58],
    [78, 68],
    [190, 169],
    [153, 67],
    [115, 87],
    [96, 85],
    [215, 22],
    [138, 38],
    [19, 11],
    [24, 4],
    [217, 56],
    [14, 2],
    [206, 127],
    [211, 154],
    [148, 111],
    [29, 25],
    [30, 17],
    [141, 5],
    [2, 1],
    [49, 5],
    [70, 22],
    [220, 69],
    [9, 6],
    [193, 80],
    [156, 69],
    [218, 155],
    [72, 48],
    [103, 34],
    [88, 52],
    [120, 62],
    [5, 1],
    [61, 16],
    [81, 66],
    [151, 137],
    [16, 8],
    [163, 72],
    [114, 106],
    [188, 173],
    [31, 19],
    [59, 4],
    [85, 50],
    [82, 26],
    [177, 174],
    [40, 13],
    [58, 40],
    [186, 43],
    [113, 69],
    [121, 73],
    [104, 23],
    [139, 134],
    [161, 123],
    [22, 18],
    [23, 16],
    [91, 30],
    [90, 16],
    [80, 16],
    [117, 22],
    [201, 126],
    [179, 162],
    [47, 16],
    [93, 88],
    [12, 10],
    [167, 119],
    [36, 14],
    [200, 132],
    [174, 99],
    [185, 142],
    [74, 38],
    [145, 118],
    [150, 88],
    [134, 7],
    [175, 37],
    [178, 57],
    [133, 97],
    [20, 18],
    [53, 1],
    [171, 104],
    [98, 75],
    [122, 40],
    [169, 13],
    [13, 1],
    [125, 98],
    [191, 24],
    [137, 96],
    [48, 42],
    [34, 3],
    [127, 98],
    [71, 33],
    [21, 19],
    [62, 15],
    [6, 2],
    [130, 119],
    [135, 28],
    [181, 93],
    [159, 105],
    [41, 2],
    [54, 20],
    [42, 19],
    [63, 43],
    [214, 203],
    [157, 68],
    [100, 80],
    [187, 153],
    [183, 9],
    [209, 52],
    [221, 26],
    [140, 42],
    [64, 2],
    [69, 58],
    [94, 50],
    [99, 71],
    [44, 33],
    [75, 44],
    [208, 35],
    [197, 36],
    [219, 149],
    [176, 128],
    [126, 7],
    [158, 15],
    [182, 49],
    [108, 19],
    [168, 157],
    [110, 11],
    [57, 54],
    [184, 63],
    [170, 49],
    [18, 6],
    [146, 15],
    [45, 34],
    [17, 7],
    [152, 9],
    [39, 19],
    [10, 9],
    [4, 1],
    [124, 36],
    [118, 20],
    [11, 10],
    [144, 128],
    [160, 78],
    [128, 1],
    [202, 168],
    [28, 16],
    [33, 27],
    [223, 141],
    [164, 14],
    [180, 163],
    [7, 3],
    [129, 95],
    [25, 5],
    [142, 87],
    [222, 175],
    [37, 26],
    [107, 3],
    [50, 37],
    [149, 10],
    [83, 73],
    [111, 75],
    [51, 26],
    [73, 66],
    [15, 3],
    [56, 30],
    [106, 41],
    [8, 1],
    [192, 15],
    [123, 3],
    [32, 17],
    [165, 131],
    [189, 72],
    [154, 24],
    [97, 86],
    [210, 1],
    [172, 27],
    [87, 46],
    [55, 52],
    [119, 34],
    [216, 89],
    [136, 2],
    [131, 92],
    [109, 36],
    [3, 1],
    [60, 55],
    [147, 21],
    [43, 33],
    [84, 33],
    [112, 47],
    [212, 169],
    [67, 29],
    [38, 15],
    [101, 94],
    [143, 23],
    [162, 84],
    [92, 48],
    [27, 5],
    [68, 4],
    [79, 29],
    [46, 30],
    [26, 12],
    [105, 103],
    [196, 142],
    [198, 50],
    [166, 85],
    [205, 87],
    [35, 6],
    [89, 71],
    [155, 13],
    [66, 16],
    [86, 78],
]
C = 137
test = Solution()
print(test.solve(A, B, C))
